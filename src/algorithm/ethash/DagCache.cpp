
#include "DagCache.h"
#include "DagFile.h"
#include "EthSha3.h"
#include <src/util/Logging.h>
#include <src/common/Assert.h>


static const uint32_t cacheSize[2048] = {
    262139U, 264179U, 266239U, 268283U, 270329U, 272383U, 274423U, 276467U,
    278503U, 280561U, 282617U, 284659U, 286711U, 288767U, 290803U, 292849U,
    294911U, 296941U, 298999U, 301051U, 303097U, 305147U, 307189U, 309241U,
    311293U, 313343U, 315389U, 317437U, 319483U, 321509U, 323581U, 325631U,
    327673U, 329723U, 331769U, 333821U, 335857U, 337919U, 339959U, 341993U,
    344053U, 346111U, 348149U, 350191U, 352249U, 354301U, 356351U, 358373U,
    360439U, 362473U, 364543U, 366547U, 368633U, 370687U, 372733U, 374783U,
    376823U, 378869U, 380917U, 382961U, 385013U, 387071U, 389117U, 391163U,
    393209U, 395261U, 397303U, 399353U, 401407U, 403439U, 405499U, 407527U,
    409597U, 411641U, 413689U, 415729U, 417773U, 419831U, 421847U, 423931U,
    425977U, 428027U, 430061U, 432121U, 434167U, 436217U, 438271U, 440311U,
    442367U, 444403U, 446461U, 448451U, 450557U, 452597U, 454637U, 456697U,
    458747U, 460793U, 462841U, 464879U, 466919U, 468983U, 471007U, 473027U,
    475109U, 477163U, 479231U, 481249U, 483323U, 485371U, 487423U, 489457U,
    491503U, 493567U, 495613U, 497663U, 499711U, 501731U, 503803U, 505823U,
    507901U, 509947U, 511997U, 514021U, 516091U, 518137U, 520151U, 522239U,
    524287U, 526307U, 528383U, 530429U, 532453U, 534511U, 536563U, 538621U,
    540629U, 542719U, 544759U, 546781U, 548861U, 550909U, 552917U, 554977U,
    557041U, 559099U, 561109U, 563197U, 565247U, 567277U, 569323U, 571381U,
    573437U, 575479U, 577531U, 579583U, 581617U, 583673U, 585727U, 587773U,
    589811U, 591863U, 593903U, 595967U, 598007U, 600053U, 602111U, 604073U,
    606181U, 608213U, 610301U, 612349U, 614387U, 616439U, 618463U, 620531U,
    622577U, 624607U, 626687U, 628721U, 630737U, 632813U, 634871U, 636919U,
    638971U, 640993U, 643061U, 645097U, 647161U, 649183U, 651257U, 653311U,
    655357U, 657403U, 659453U, 661483U, 663547U, 665591U, 667643U, 669689U,
    671743U, 673787U, 675839U, 677857U, 679933U, 681983U, 684017U, 686057U,
    688111U, 690163U, 692221U, 694271U, 696317U, 698359U, 700393U, 702451U,
    704507U, 706547U, 708601U, 710641U, 712697U, 714751U, 716789U, 718847U,
    720887U, 722933U, 724991U, 727021U, 729073U, 731117U, 733177U, 735211U,
    737279U, 739327U, 741373U, 743423U, 745471U, 747499U, 749557U, 751613U,
    753659U, 755707U, 757753U, 759799U, 761833U, 763901U, 765949U, 767957U,
    770047U, 772091U, 774143U, 776183U, 778237U, 780287U, 782329U, 784379U,
    786431U, 788479U, 790523U, 792563U, 794593U, 796657U, 798713U, 800759U,
    802811U, 804857U, 806903U, 808957U, 810989U, 813049U, 815063U, 817151U,
    819187U, 821209U, 823283U, 825343U, 827389U, 829399U, 831461U, 833509U,
    835559U, 837631U, 839669U, 841727U, 843763U, 845809U, 847871U, 849917U,
    851957U, 853999U, 856061U, 858103U, 860143U, 862207U, 864251U, 866293U,
    868349U, 870391U, 872441U, 874487U, 876529U, 878573U, 880603U, 882659U,
    884717U, 886777U, 888827U, 890867U, 892919U, 894973U, 897019U, 899069U,
    901111U, 903163U, 905213U, 907259U, 909301U, 911359U, 913397U, 915451U,
    917503U, 919531U, 921589U, 923641U, 925679U, 927743U, 929791U, 931837U,
    933883U, 935903U, 937969U, 940031U, 942079U, 944123U, 946163U, 948187U,
    950269U, 952313U, 954367U, 956401U, 958459U, 960499U, 962543U, 964589U,
    966653U, 968699U, 970747U, 972799U, 974837U, 976883U, 978931U, 980963U,
    982981U, 985079U, 987127U, 989173U, 991229U, 993269U, 995327U, 997369U,
    999389U, 1001467U, 1003517U, 1005553U, 1007609U, 1009651U, 1011697U, 1013741U,
    1015769U, 1017851U, 1019903U, 1021919U, 1023991U, 1026043U, 1028089U, 1030121U,
    1032191U, 1034239U, 1036271U, 1038329U, 1040381U, 1042427U, 1044479U, 1046527U,
    1048573U, 1050611U, 1052663U, 1054717U, 1056739U, 1058809U, 1060861U, 1062911U,
    1064957U, 1066999U, 1069051U, 1071067U, 1073147U, 1075187U, 1077233U, 1079291U,
    1081337U, 1083391U, 1085431U, 1087487U, 1089523U, 1091581U, 1093591U, 1095671U,
    1097717U, 1099771U, 1101811U, 1103863U, 1105919U, 1107937U, 1110013U, 1112057U,
    1114111U, 1116133U, 1118203U, 1120237U, 1122287U, 1124351U, 1126399U, 1128433U,
    1130471U, 1132541U, 1134587U, 1136633U, 1138681U, 1140721U, 1142783U, 1144823U,
    1146877U, 1148921U, 1150973U, 1153021U, 1155071U, 1157111U, 1159153U, 1161203U,
    1163263U, 1165303U, 1167359U, 1169401U, 1171451U, 1173481U, 1175521U, 1177571U,
    1179641U, 1181681U, 1183739U, 1185791U, 1187839U, 1189879U, 1191923U, 1193971U,
    1196029U, 1198073U, 1200109U, 1202153U, 1204219U, 1206263U, 1208303U, 1210351U,
    1212401U, 1214459U, 1216507U, 1218559U, 1220599U, 1222651U, 1224703U, 1226741U,
    1228789U, 1230829U, 1232893U, 1234901U, 1236979U, 1239023U, 1241087U, 1243133U,
    1245169U, 1247231U, 1249273U, 1251323U, 1253347U, 1255421U, 1257463U, 1259509U,
    1261567U, 1263607U, 1265657U, 1267711U, 1269757U, 1271807U, 1273843U, 1275899U,
    1277911U, 1279997U, 1282033U, 1284083U, 1286119U, 1288187U, 1290209U, 1292281U,
    1294309U, 1296371U, 1298387U, 1300477U, 1302493U, 1304551U, 1306601U, 1308649U,
    1310719U, 1312739U, 1314809U, 1316831U, 1318903U, 1320947U, 1323001U, 1325047U,
    1327099U, 1329143U, 1331153U, 1333231U, 1335289U, 1337333U, 1339391U, 1341437U,
    1343479U, 1345507U, 1347569U, 1349533U, 1351667U, 1353713U, 1355771U, 1357823U,
    1359871U, 1361911U, 1363963U, 1366009U, 1368053U, 1370111U, 1372139U, 1374187U,
    1376237U, 1378301U, 1380341U, 1382393U, 1384433U, 1386491U, 1388483U, 1390573U,
    1392631U, 1394683U, 1396723U, 1398781U, 1400821U, 1402873U, 1404919U, 1406959U,
    1409017U, 1411061U, 1413107U, 1415143U, 1417189U, 1419263U, 1421309U, 1423339U,
    1425371U, 1427453U, 1429481U, 1431539U, 1433591U, 1435631U, 1437691U, 1439743U,
    1441771U, 1443839U, 1445887U, 1447913U, 1449983U, 1451969U, 1454071U, 1456127U,
    1458169U, 1460213U, 1462249U, 1464299U, 1466329U, 1468403U, 1470461U, 1472507U,
    1474559U, 1476581U, 1478639U, 1480691U, 1482743U, 1484741U, 1486847U, 1488871U,
    1490941U, 1492969U, 1495019U, 1497061U, 1499123U, 1501177U, 1503181U, 1505279U,
    1507321U, 1509371U, 1511423U, 1513453U, 1515509U, 1517567U, 1519607U, 1521649U,
    1523707U, 1525747U, 1527803U, 1529851U, 1531897U, 1533947U, 1535987U, 1538039U,
    1540087U, 1542137U, 1544177U, 1546231U, 1548277U, 1550327U, 1552381U, 1554419U,
    1556473U, 1558523U, 1560569U, 1562611U, 1564657U, 1566673U, 1568767U, 1570781U,
    1572853U, 1574873U, 1576957U, 1579001U, 1581053U, 1583093U, 1585147U, 1587197U,
    1589239U, 1591277U, 1593341U, 1595389U, 1597433U, 1599469U, 1601533U, 1603573U,
    1605631U, 1607663U, 1609717U, 1611773U, 1613813U, 1615871U, 1617893U, 1619957U,
    1622009U, 1624057U, 1626109U, 1628153U, 1630199U, 1632227U, 1634293U, 1636343U,
    1638353U, 1640447U, 1642483U, 1644497U, 1646581U, 1648613U, 1650673U, 1652731U,
    1654739U, 1656829U, 1658873U, 1660921U, 1662961U, 1665023U, 1667053U, 1669103U,
    1671161U, 1673209U, 1675259U, 1677287U, 1679351U, 1681403U, 1683433U, 1685503U,
    1687549U, 1689553U, 1691647U, 1693691U, 1695737U, 1697771U, 1699837U, 1701881U,
    1703903U, 1705973U, 1708009U, 1710077U, 1712077U, 1714171U, 1716217U, 1718267U,
    1720307U, 1722359U, 1724413U, 1726453U, 1728511U, 1730551U, 1732597U, 1734647U,
    1736701U, 1738739U, 1740793U, 1742843U, 1744891U, 1746929U, 1748963U, 1751039U,
    1753069U, 1755133U, 1757153U, 1759231U, 1761187U, 1763323U, 1765369U, 1767421U,
    1769441U, 1771507U, 1773523U, 1775611U, 1777661U, 1779709U, 1781743U, 1783801U,
    1785853U, 1787899U, 1789951U, 1791991U, 1794041U, 1796071U, 1798133U, 1800191U,
    1802239U, 1804273U, 1806331U, 1808377U, 1810423U, 1812457U, 1814509U, 1816567U,
    1818617U, 1820671U, 1822703U, 1824761U, 1826807U, 1828847U, 1830911U, 1832947U,
    1835003U, 1837027U, 1839091U, 1841141U, 1843189U, 1845229U, 1847281U, 1849333U,
    1851391U, 1853399U, 1855463U, 1857533U, 1859569U, 1861631U, 1863677U, 1865719U,
    1867771U, 1869823U, 1871851U, 1873889U, 1875959U, 1878013U, 1880027U, 1882099U,
    1884133U, 1886197U, 1888253U, 1890299U, 1892329U, 1894397U, 1896443U, 1898483U,
    1900543U, 1902569U, 1904621U, 1906673U, 1908713U, 1910767U, 1912831U, 1914853U,
    1916921U, 1918967U, 1921021U, 1923059U, 1925117U, 1927157U, 1929199U, 1931261U,
    1933301U, 1935343U, 1937401U, 1939447U, 1941503U, 1943537U, 1945597U, 1947641U,
    1949657U, 1951739U, 1953767U, 1955839U, 1957871U, 1959889U, 1961983U, 1964009U,
    1966079U, 1968103U, 1970161U, 1972207U, 1974263U, 1976309U, 1978363U, 1980413U,
    1982447U, 1984511U, 1986553U, 1988599U, 1990643U, 1992691U, 1994743U, 1996793U,
    1998839U, 2000863U, 2002939U, 2004991U, 2007029U, 2009083U, 2011129U, 2013181U,
    2015213U, 2017247U, 2019317U, 2021339U, 2023421U, 2025467U, 2027513U, 2029567U,
    2031611U, 2033657U, 2035687U, 2037757U, 2039797U, 2041849U, 2043869U, 2045929U,
    2047993U, 2050033U, 2052059U, 2054131U, 2056157U, 2058239U, 2060287U, 2062303U,
    2064379U, 2066419U, 2068477U, 2070527U, 2072573U, 2074609U, 2076653U, 2078719U,
    2080763U, 2082803U, 2084833U, 2086907U, 2088953U, 2090989U, 2093041U, 2095099U,
    2097143U, 2099197U, 2101247U, 2103239U, 2105329U, 2107381U, 2109421U, 2111471U,
    2113523U, 2115571U, 2117623U, 2119673U, 2121683U, 2123773U, 2125819U, 2127857U,
    2129903U, 2131951U, 2134007U, 2136061U, 2138093U, 2140157U, 2142181U, 2144251U,
    2146303U, 2148347U, 2150399U, 2152433U, 2154491U, 2156537U, 2158591U, 2160629U,
    2162681U, 2164681U, 2166763U, 2168827U, 2170877U, 2172917U, 2174951U, 2177011U,
    2179063U, 2181097U, 2183141U, 2185201U, 2187259U, 2189309U, 2191339U, 2193383U,
    2195443U, 2197501U, 2199529U, 2201599U, 2203637U, 2205667U, 2207719U, 2209789U,
    2211821U, 2213867U, 2215931U, 2217967U, 2220007U, 2222071U, 2224099U, 2226163U,
    2228221U, 2230253U, 2232317U, 2234341U, 2236397U, 2238421U, 2240507U, 2242549U,
    2244589U, 2246641U, 2248703U, 2250713U, 2252779U, 2254831U, 2256887U, 2258917U,
    2260967U, 2263007U, 2265079U, 2267131U, 2269181U, 2271229U, 2273279U, 2275327U,
    2277367U, 2279423U, 2281429U, 2283511U, 2285551U, 2287613U, 2289659U, 2291699U,
    2293757U, 2295803U, 2297849U, 2299901U, 2301941U, 2303999U, 2306041U, 2308079U,
    2310137U, 2312179U, 2314231U, 2316287U, 2318333U, 2320363U, 2322431U, 2324471U,
    2326517U, 2328569U, 2330617U, 2332667U, 2334691U, 2336743U, 2338799U, 2340859U,
    2342869U, 2344943U, 2347001U, 2349041U, 2351101U, 2353129U, 2355191U, 2357231U,
    2359267U, 2361343U, 2363359U, 2365439U, 2367487U, 2369527U, 2371543U, 2373611U,
    2375671U, 2377721U, 2379761U, 2381807U, 2383867U, 2385919U, 2387953U, 2390009U,
    2392057U, 2394109U, 2396153U, 2398189U, 2400253U, 2402297U, 2404349U, 2406379U,
    2408437U, 2410483U, 2412541U, 2414591U, 2416619U, 2418683U, 2420723U, 2422781U,
    2424827U, 2426873U, 2428919U, 2430947U, 2433001U, 2435053U, 2437049U, 2439167U,
    2441209U, 2443241U, 2445301U, 2447359U, 2449399U, 2451443U, 2453501U, 2455547U,
    2457569U, 2459623U, 2461649U, 2463707U, 2465789U, 2467783U, 2469871U, 2471927U,
    2473979U, 2476013U, 2478067U, 2480119U, 2482157U, 2484203U, 2486269U, 2488319U,
    2490337U, 2492393U, 2494463U, 2496503U, 2498539U, 2500601U, 2502649U, 2504693U,
    2506729U, 2508797U, 2510843U, 2512847U, 2514943U, 2516981U, 2519021U, 2521081U,
    2523133U, 2525179U, 2527223U, 2529269U, 2531293U, 2533373U, 2535413U, 2537467U,
    2539519U, 2541563U, 2543609U, 2545657U, 2547689U, 2549759U, 2551793U, 2553853U,
    2555897U, 2557937U, 2559989U, 2562031U, 2564077U, 2566141U, 2568191U, 2570233U,
    2572279U, 2574323U, 2576369U, 2578423U, 2580469U, 2582501U, 2584573U, 2586611U,
    2588671U, 2590717U, 2592763U, 2594807U, 2596849U, 2598907U, 2600957U, 2602993U,
    2605039U, 2607097U, 2609147U, 2611199U, 2613229U, 2615287U, 2617319U, 2619391U,
    2621431U, 2623487U, 2625533U, 2627563U, 2629621U, 2631679U, 2633713U, 2635757U,
    2637799U, 2639869U, 2641909U, 2643961U, 2646013U, 2648057U, 2650093U, 2652157U,
    2654161U, 2656243U, 2658301U, 2660351U, 2662399U, 2664443U, 2666491U, 2668469U,
    2670589U, 2672639U, 2674673U, 2676731U, 2678749U, 2680831U, 2682859U, 2684923U,
    2686973U, 2689019U, 2691067U, 2693113U, 2695151U, 2697209U, 2699183U, 2701301U,
    2703347U, 2705383U, 2707423U, 2709491U, 2711549U, 2713589U, 2715637U, 2717683U,
    2719741U, 2721773U, 2723839U, 2725871U, 2727919U, 2729983U, 2732027U, 2734027U,
    2736089U, 2738167U, 2740223U, 2742263U, 2744317U, 2746339U, 2748413U, 2750453U,
    2752499U, 2754551U, 2756603U, 2758633U, 2760701U, 2762741U, 2764789U, 2766821U,
    2768893U, 2770939U, 2772977U, 2775011U, 2777057U, 2779129U, 2781169U, 2783227U,
    2785273U, 2787307U, 2789351U, 2791409U, 2793467U, 2795501U, 2797567U, 2799607U,
    2801641U, 2803699U, 2805757U, 2807789U, 2809847U, 2811883U, 2813947U, 2815997U,
    2818043U, 2820089U, 2822143U, 2824189U, 2826211U, 2828281U, 2830301U, 2832383U,
    2834417U, 2836447U, 2838487U, 2840549U, 2842603U, 2844649U, 2846719U, 2848753U,
    2850811U, 2852849U, 2854903U, 2856923U, 2859001U, 2861051U, 2863079U, 2865131U,
    2867107U, 2869241U, 2871293U, 2873341U, 2875387U, 2877419U, 2879479U, 2881531U,
    2883577U, 2885627U, 2887669U, 2889707U, 2891761U, 2893811U, 2895869U, 2897897U,
    2899943U, 2901989U, 2904061U, 2906089U, 2908151U, 2910203U, 2912243U, 2914283U,
    2916343U, 2918393U, 2920427U, 2922461U, 2924533U, 2926591U, 2928581U, 2930657U,
    2932711U, 2934773U, 2936831U, 2938861U, 2940911U, 2942959U, 2945021U, 2947027U,
    2949119U, 2951161U, 2953207U, 2955257U, 2957267U, 2959321U, 2961377U, 2963453U,
    2965499U, 2967551U, 2969597U, 2971607U, 2973673U, 2975741U, 2977781U, 2979833U,
    2981887U, 2983927U, 2985979U, 2988023U, 2990063U, 2992123U, 2994169U, 2996219U,
    2998253U, 3000317U, 3002327U, 3004409U, 3006461U, 3008477U, 3010543U, 3012593U,
    3014653U, 3016697U, 3018733U, 3020789U, 3022847U, 3024881U, 3026929U, 3028973U,
    3031031U, 3033073U, 3035113U, 3037183U, 3039193U, 3041279U, 3043321U, 3045323U,
    3047423U, 3049469U, 3051511U, 3053563U, 3055603U, 3057661U, 3059659U, 3061759U,
    3063803U, 3065849U, 3067903U, 3069949U, 3071993U, 3074047U, 3076093U, 3078137U,
    3080167U, 3082231U, 3084287U, 3086311U, 3088381U, 3090431U, 3092447U, 3094523U,
    3096571U, 3098597U, 3100663U, 3102713U, 3104767U, 3106787U, 3108863U, 3110903U,
    3112943U, 3115003U, 3117053U, 3119089U, 3121121U, 3123187U, 3125219U, 3127291U,
    3129323U, 3131377U, 3133439U, 3135487U, 3137531U, 3139583U, 3141601U, 3143671U,
    3145721U, 3147773U, 3149821U, 3151871U, 3153919U, 3155963U, 3157993U, 3160063U,
    3162101U, 3164143U, 3166193U, 3168247U, 3170287U, 3172349U, 3174373U, 3176447U,
    3178489U, 3180523U, 3182591U, 3184639U, 3186683U, 3188723U, 3190753U, 3192829U,
    3194879U, 3196927U, 3198967U, 3201007U, 3203071U, 3205087U, 3207161U, 3209201U,
    3211213U, 3213283U, 3215347U, 3217399U, 3219449U, 3221503U, 3223547U, 3225539U,
    3227641U, 3229691U, 3231737U, 3233779U, 3235829U, 3237869U, 3239927U, 3241981U,
    3244013U, 3246079U, 3248111U, 3250157U, 3252217U, 3254269U, 3256313U, 3258349U,
    3260407U, 3262451U, 3264491U, 3266551U, 3268591U, 3270653U, 3272681U, 3274729U,
    3276799U, 3278837U, 3280889U, 3282913U, 3284989U, 3287033U, 3289087U, 3291109U,
    3293183U, 3295223U, 3297263U, 3299323U, 3301369U, 3303409U, 3305459U, 3307489U,
    3309563U, 3311603U, 3313663U, 3315701U, 3317719U, 3319807U, 3321841U, 3323869U,
    3325943U, 3327991U, 3330013U, 3332093U, 3334141U, 3336181U, 3338213U, 3340277U,
    3342331U, 3344377U, 3346417U, 3348479U, 3350527U, 3352571U, 3354613U, 3356657U,
    3358703U, 3360767U, 3362809U, 3364853U, 3366911U, 3368957U, 3370993U, 3373043U,
    3375083U, 3377141U, 3379177U, 3381239U, 3383293U, 3385339U, 3387353U, 3389437U,
    3391477U, 3393487U, 3395573U, 3397627U, 3399673U, 3401711U, 3403733U, 3405823U,
    3407857U, 3409891U, 3411949U, 3414013U, 3416059U, 3418111U, 3420139U, 3422207U,
    3424249U, 3426277U, 3428329U, 3430391U, 3432437U, 3434489U, 3436541U, 3438583U,
    3440627U, 3442679U, 3444713U, 3446761U, 3448831U, 3450871U, 3452923U, 3454967U,
    3457019U, 3459037U, 3461099U, 3463157U, 3465199U, 3467263U, 3469247U, 3471359U,
    3473399U, 3475453U, 3477499U, 3479537U, 3481573U, 3483643U, 3485687U, 3487709U,
    3489781U, 3491827U, 3493883U, 3495917U, 3497959U, 3500023U, 3502073U, 3504107U,
    3506171U, 3508201U, 3510271U, 3512317U, 3514367U, 3516413U, 3518461U, 3520511U,
    3522559U, 3524603U, 3526637U, 3528659U, 3530731U, 3532769U, 3534841U, 3536881U,
    3538933U, 3540991U, 3543037U, 3545083U, 3547111U, 3549179U, 3551227U, 3553273U,
    3555311U, 3557339U, 3559421U, 3561443U, 3563519U, 3565567U, 3567601U, 3569653U,
    3571699U, 3573751U, 3575783U, 3577829U, 3579893U, 3581927U, 3583999U, 3586021U,
    3588077U, 3590143U, 3592109U, 3594223U, 3596287U, 3598319U, 3600383U, 3602393U,
    3604451U, 3606511U, 3608569U, 3610619U, 3612671U, 3614719U, 3616757U, 3618809U,
    3620843U, 3622909U, 3624949U, 3626989U, 3629053U, 3631073U, 3633151U, 3635197U,
    3637223U, 3639289U, 3641311U, 3643369U, 3645419U, 3647477U, 3649531U, 3651559U,
    3653603U, 3655667U, 3657691U, 3659717U, 3661781U, 3663833U, 3665911U, 3667967U,
    3670013U, 3672059U, 3674101U, 3676157U, 3678179U, 3680249U, 3682303U, 3684337U,
    3686387U, 3688393U, 3690473U, 3692543U, 3694583U, 3696619U, 3698683U, 3700727U,
    3702757U, 3704821U, 3706861U, 3708923U, 3710963U, 3712981U, 3715069U, 3717113U,
    3719167U, 3721213U, 3723233U, 3725303U, 3727313U, 3729391U, 3731447U, 3733463U,
    3735547U, 3737599U, 3739613U, 3741671U, 3743737U, 3745789U, 3747833U, 3749881U,
    3751919U, 3753979U, 3756029U, 3758077U, 3760123U, 3762173U, 3764213U, 3766261U,
    3768311U, 3770357U, 3772397U, 3774457U, 3776503U, 3778531U, 3780607U, 3782629U,
    3784691U, 3786751U, 3788779U, 3790807U, 3792889U, 3794941U, 3796963U, 3799039U,
    3801073U, 3803131U, 3805183U, 3807229U, 3809279U, 3811321U, 3813353U, 3815423U,
    3817447U, 3819511U, 3821563U, 3823609U, 3825649U, 3827701U, 3829757U, 3831781U,
    3833833U, 3835903U, 3837949U, 3839999U, 3842029U, 3844079U, 3846133U, 3848191U,
    3850237U, 3852271U, 3854311U, 3856381U, 3858431U, 3860471U, 3862493U, 3864557U,
    3866623U, 3868649U, 3870719U, 3872767U, 3874807U, 3876827U, 3878899U, 3880949U,
    3883001U, 3885047U, 3887083U, 3889079U, 3891197U, 3893243U, 3895291U, 3897331U,
    3899383U, 3901439U, 3903481U, 3905533U, 3907583U, 3909617U, 3911653U, 3913727U,
    3915761U, 3917801U, 3919859U, 3921919U, 3923963U, 3925993U, 3928049U, 3930061U,
    3932153U, 3934207U, 3936241U, 3938303U, 3940351U, 3942397U, 3944441U, 3946493U,
    3948541U, 3950563U, 3952633U, 3954683U, 3956681U, 3958777U, 3960829U, 3962867U,
    3964913U, 3966961U, 3969019U, 3971063U, 3973117U, 3975163U, 3977209U, 3979259U,
    3981301U, 3983341U, 3985403U, 3987449U, 3989477U, 3991543U, 3993593U, 3995647U,
    3997673U, 3999739U, 4001791U, 4003819U, 4005847U, 4007933U, 4009939U, 4012013U,
    4014071U, 4016119U, 4018159U, 4020223U, 4022257U, 4024309U, 4026359U, 4028413U,
    4030463U, 4032493U, 4034549U, 4036601U, 4038647U, 4040683U, 4042729U, 4044797U,
    4046821U, 4048871U, 4050941U, 4052989U, 4055033U, 4057061U, 4059131U, 4061177U,
    4063217U, 4065241U, 4067321U, 4069349U, 4071421U, 4073453U, 4075507U, 4077559U,
    4079573U, 4081661U, 4083701U, 4085749U, 4087807U, 4089853U, 4091873U, 4093937U,
    4095991U, 4098043U, 4100069U, 4102141U, 4104187U, 4106239U, 4108261U, 4110331U,
    4112371U, 4114421U, 4116479U, 4118519U, 4120573U, 4122623U, 4124671U, 4126697U,
    4128767U, 4130807U, 4132831U, 4134887U, 4136939U, 4138999U, 4141009U, 4143101U,
    4145117U, 4147163U, 4149227U, 4151269U, 4153333U, 4155367U, 4157437U, 4159471U,
    4161527U, 4163563U, 4165631U, 4167673U, 4169723U, 4171771U, 4173817U, 4175869U,
    4177913U, 4179953U, 4182011U, 4184027U, 4186103U, 4188133U, 4190189U, 4192231U,
    4194301U, 4196347U, 4198379U, 4200439U, 4202489U, 4204537U, 4206583U, 4208629U,
    4210667U, 4212731U, 4214779U, 4216819U, 4218869U, 4220927U, 4222973U, 4225019U,
    4227061U, 4229119U, 4231121U, 4233199U, 4235263U, 4237283U, 4239331U, 4241399U,
    4243453U, 4245499U, 4247549U, 4249579U, 4251647U, 4253693U, 4255739U, 4257787U,
    4259837U, 4261867U, 4263929U, 4265981U, 4268029U, 4270073U, 4272119U, 4274173U,
    4276213U, 4278257U, 4280267U, 4282367U, 4284389U, 4286453U, 4288489U, 4290553U,
    4292597U, 4294649U, 4296703U, 4298729U, 4300789U, 4302847U, 4304891U, 4306937U,
    4308989U, 4311037U, 4313081U, 4315123U, 4317151U, 4319209U, 4321259U, 4323323U,
    4325359U, 4327423U, 4329463U, 4331513U, 4333547U, 4335607U, 4337651U, 4339703U,
    4341697U, 4343791U, 4345849U, 4347899U, 4349927U, 4351981U, 4354027U, 4356091U,
    4358143U, 4360189U, 4362233U, 4364267U, 4366309U, 4368379U, 4370407U, 4372477U,
    4374527U, 4376557U, 4378609U, 4380647U, 4382713U, 4384727U, 4386803U, 4388861U,
    4390909U, 4392937U, 4394983U, 4397053U, 4399103U, 4401143U, 4403183U, 4405243U,
    4407289U, 4409333U, 4411391U, 4413419U, 4415473U, 4417513U, 4419581U, 4421621U,
    4423673U, 4425721U, 4427771U, 4429819U, 4431871U, 4433911U, 4435961U, 4438009U,
    4440049U, 4442107U, 4444159U, 4446203U, 4448239U, 4450301U, 4452347U, 4454399U
};

static constexpr uint32_t FNV_PRIME = 0x01000193U;
static inline uint32_t fnv(uint32_t x, uint32_t y) {
    return x * FNV_PRIME ^ y;
}
static inline uint32_t fnvReduce(uint32_t v[4]) {
    return fnv(fnv(fnv(v[0], v[1]), v[2]), v[3]);
}


namespace miner {

    uint32_t calculateEthEpoch(cByteSpan<32> seedHash) {
        uint8_t testSeedHash[32] = {0};

        for (uint32_t epoch = 0; epoch < 2048; epoch++) {
            if (!memcmp(testSeedHash, seedHash.data(), 32))
                return epoch;
            SHA3_256(testSeedHash, testSeedHash, 32);
        }

        LOG(ERROR) << "Error on epoch calculation.";

        return std::numeric_limits<uint32_t>::max();
    }


    void DagCacheContainer::generate(uint32_t epoch, cByteSpan<32> seedHash) {
        valid = false;
        if (epoch == std::numeric_limits<uint32_t>::max())
            return;

        try {
            LOG(INFO) << "calculating dag cache for epoch = " << epoch;
            MI_EXPECTS(epoch == calculateEthEpoch(seedHash));
            const uint32_t numNodes = cacheSize[epoch];
            buffer = DynamicBuffer<node_t>(numNodes);
            auto nodes = buffer.data();

            SHA3_512(buffer.bytes(), seedHash.data(), 32);

            for(uint32_t i = 1; i < numNodes; i++) {
                SHA3_512(nodes[i].byte, nodes[i - 1].byte, 64);
            }

            for(int j = 0; j < 3; j++) { // ETHASH_CACHE_ROUNDS == 3
                for(uint32_t i = 0; i < numNodes; i++) {
                    uint32_t const idx = nodes[i].word[0] % numNodes;
                    node_t data = nodes[i == 0 ? numNodes - 1 : i - 1];
                    for(int w = 0; w < 16; w++) {
                        data.word[w] ^= nodes[idx].word[w];
                    }

                    SHA3_512(nodes[i].byte, data.byte, sizeof(data));
                }
            }

            currentEpoch = epoch;
            valid = true;
        }
        catch(std::bad_alloc &e) {
            LOG(ERROR) << "failed to allocate dag cache memory for epoch = "<< epoch <<": bad_alloc exception: " << e.what();
        }
    }

    DagCacheContainer::node_t DagCacheContainer::getDagItem(uint32_t idx) const {
        const auto data = buffer.data();
        node_t node = data[idx % cacheSize[currentEpoch]];
        node.word[0] ^= idx;

        SHA3_512(node.byte, node.byte, sizeof(node));
        for (int i = 0; i < 256; i++) {
            uint32_t parentIdx = fnv(idx ^ i, node.word[i % 16]) % cacheSize[currentEpoch];
            const node_t *parent = &data[parentIdx];

            for (int j = 0; j < 16; j++) {
                node.word[j] *= FNV_PRIME;
                node.word[j] ^= parent->word[j];
            }
        }
        SHA3_512(node.byte, node.byte, sizeof(node));

        return node;
    }

    DagCacheContainer::HashResult DagCacheContainer::getHash(const Bytes<32> &header, uint64_t nonce) const {
        HashResult result;
        const auto &byteNonce = toBytesWithLittleEndian(nonce);
        uint32_t mixState[32];
        uint32_t tmpState[24];
        auto tmpBuf = reinterpret_cast<uint8_t*>(tmpState);

        memcpy(tmpBuf, header.data(), 32);
        memcpy(tmpBuf + 32, byteNonce.data(), 8);
        SHA3_512(tmpBuf, tmpBuf, 40);

        memcpy(mixState, tmpBuf, 64);

        // The other half of the state is filled by simply
        // duplicating the first half of its initial value.
        memcpy(mixState + 16, mixState, 64);

        const uint32_t dagSize = DagFile::getSize(currentEpoch);
        uint32_t mixValue = mixState[0];
        uint32_t init = mixValue;
        for (int i = 0; i < 64; i++) {
            uint32_t row = fnv(init ^ i, mixValue) % dagSize;
            node_t dagNodes[2];
            dagNodes[0] = getDagItem(row << 1);
            dagNodes[1] = getDagItem((row << 1) + 1);
            const uint32_t *columns = reinterpret_cast<uint32_t*>(dagNodes);

            for (int col = 0; col < 32; col++) {
                mixState[col] = fnv(mixState[col], columns[col]);
                mixValue = col == ((i + 1) & 0x1F) ? mixState[col] : mixValue;
            }
        }

        // The reducing of the mix state directly into where
        // it will be hashed to produce the final hash. Note
        // that the initial hash is still in the first 64
        // bytes of TmpBuf - we're appending the mix hash.
        for (int i = 0; i < 8; ++i)
            tmpState[i + 16] = fnvReduce(mixState + (i << 2));

        memcpy(result.mixHash.data(), tmpState + 16, 32);

        // Hash the initial hash and the mix hash concatenated
        // to get the final proof-of-work hash that is our output.
        SHA3_256(result.proofOfWorkHash.data(), tmpBuf, 96);
        std::reverse(result.proofOfWorkHash.begin(), result.proofOfWorkHash.end());

        return result;
    }

    bool DagCacheContainer::isGenerated(uint32_t epoch) const {
        return valid && epoch == currentEpoch;
    }

    uint64_t DagCacheContainer::getByteSize() const {
        return valid ? uint64_t(64) * cacheSize[currentEpoch] : std::numeric_limits<uint64_t>::max();
    }

    uint32_t DagCacheContainer::getSize() const {
        return valid ? cacheSize[currentEpoch] : std::numeric_limits<uint32_t>::max();
    }

    uint32_t DagCacheContainer::getEpoch() const {
        return currentEpoch;
    }

    DagCacheContainer::operator bool() const {
        return valid;
    }

    cByteSpan<> DagCacheContainer::getByteCache() const {
        return buffer.getByteSpan();
    }

}
